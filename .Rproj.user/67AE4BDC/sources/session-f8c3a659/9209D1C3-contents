---
title: "ATLAS-SPACE"
author: "TylerMarghetis"
date: "11/2/2023"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) 

library(ggmap) 
library(sf)
library("rnaturalearth")
library("rnaturalearthdata")

library(lmerTest)
```

```{r}
ATLAS_space_Databank <- read_csv("../ATLAS Data/ATLAS Databank v0.2 - SPACE Finalized.csv")
ATLAS_space_Databank <- ATLAS_space_Databank %>% 
  subset(is.na(Citation) == F) %>%
  mutate(Domain = "space")
```

# Data setup

```{r}
communicativeTasks <- c("LanguageProductionSpoken","LanguageProductionWritten",
                        "GesturePrompted", "GestureSpontaneous",
                        "ForcedChoiceDescription")
gestureTasks <- c("LanguageProductionSpoken","LanguageProductionWritten",
                  "GesturePrompted", "GestureSpontaneous",
                  "ForcedChoiceDescription")
languageTasks <- c("LanguageProductionSpoken","LanguageProductionWritten",
                   "ForcedChoiceDescription")

ATLAS_space_Databank <- ATLAS_space_Databank %>% 
  mutate(urbanRuralNum = case_when(UrbanRural == "rural" ~ 0, 
                                   UrbanRural == "rural/urbans" ~ .5, 
                                   UrbanRural == "urbans" ~ 1, 
                                   UrbanRural == "urbanl" ~ 2)) %>% 
  mutate(scaleNum = case_when(Scale == "small" ~ 0, 
                              Scale == "medium; small" ~ .5, 
                              Scale == "medium" ~ 1, 
                              Scale == "large" ~ 2,
                              TRUE ~ NA),
         FoR_is_allo = FoR %in% c("allo","both"),
         FoR_is_ego = FoR %in% c("ego","both"),) %>% 
  mutate(taskIsCommunicative = DependentMeasurePrimary %in% communicativeTasks,
         taskIsGestural = DependentMeasurePrimary %in% gestureTasks,
         taskIsLinguistic = DependentMeasurePrimary %in% languageTasks)
```

# Explore data

## Urban-Rural
```{r}

xtabs(~urbanRuralNum + FoR, ATLAS_space_Databank)
```

## Group sample size

```{r}
groupSize_urban.m1 <- lm(GroupSampleSize ~ urbanRuralNum, ATLAS_space_Databank)
summary(groupSize_urban.m1)

studySize_urban.m1 <- lm(GroupSampleSize ~ urbanRuralNum, ATLAS_space_Databank)
summary(studySize_urban.m1)
```

## Task
```{r}
unique(ATLAS_space_Databank$DependentMeasurePrimary)

summary(lm(FoR_is_allo ~ taskIsCommunicative, ATLAS_space_Databank))
summary(lm(FoR_is_allo ~ taskIsGestural, ATLAS_space_Databank))
summary(lm(FoR_is_allo ~ taskIsLinguistic, ATLAS_space_Databank))
# Need to look at performance, not just choice

xtabs(~PerformanceIfRestrictedFoR + FoR_In_Task, ATLAS_space_Databank)
xtabs(~FoR, ATLAS_space_Databank %>% 
        filter(FoR_In_Task == "ego/allo"))
ATLAS_space_Databank %>% select(FoR_In_Task, FoR, PerformanceIfRestrictedFoR)
```

## Scale

```{r}
xtabs(~scaleNum + FoR, ATLAS_space_Databank)

summary(lm(FoR_is_allo ~ scaleNum, ATLAS_space_Databank))
summary(lm(FoR_is_allo ~ urbanRuralNum, ATLAS_space_Databank))
summary(lm(FoR_is_allo ~ Year, ATLAS_space_Databank))

# These associations are pretty much independent: 
summary(lm(FoR_is_allo ~ Year + urbanRuralNum + scaleNum, ATLAS_space_Databank))
unique(ATLAS_space_Databank$Venue)
```

# Spatial distribution
## Load spatial lat-long data

```{r}
# Load:
ATLAS_space_Databank_locations <- read_csv("../ATLAS Data/ATLAS_space_Databank_locations.csv")

ATLAS_space_Databank <- ATLAS_space_Databank %>% 
  mutate(StudyLocation = paste(SpecificLocation, Country, sep=", "))

# Merge
ATLAS_space_Databank <- ATLAS_space_Databank %>% 
  left_join(ATLAS_space_Databank_locations)
```

## Visualize map

Get the map info: 
```{r}
world <- ne_countries(scale = "medium", returnclass = "sf") # get map

```

Plot each unique fieldsite: 
```{r}
atlas.space.plot1 <- ggplot(data = world) +
  geom_sf(color="grey70", 
          # aes(fill=rev(economy)),
          alpha=.4, show.legend = F) + 
  # scale_fill_brewer(type="seq") + 
  # geom_line(data=ATLAS_Databank.geo4, 
  #           aes(x=lon, y=lat, group=Citation, color = Domain)) + 
  geom_point(data=ATLAS_space_Databank_locations, 
             aes(x=lon, y=lat), 
             # shape=21, 
             alpha=.8,
             color='black') +
  geom_point(data=ATLAS_space_Databank_locations, 
             aes(x=lon, y=lat), 
             # shape=21, 
             alpha=1,
             color='black', fill = NA) +
  coord_sf(expand=0) + 
  scale_x_continuous(name = NULL, limits = c(-180, 180)) + 
  scale_y_continuous(name = NULL, limits = c(-60, 90)) + 
  scale_color_discrete(NULL, guide=F) + 
  scale_fill_discrete(NULL, guide=F) + 
  
  theme_bw() + 
  theme(plot.title = element_text(hjust=.5), 
        panel.grid.major = element_blank(),
        legend.position = "bottom", strip.text = element_text(size=20))

atlas.space.plot1
ggsave("plots/ATLAS_space_fieldsites_globalDistribution.pdf",
       atlas.space.plot1, width=6, height=6)

```

Add info on sample size fieldsite: 
```{r}
atlas.space.sampleSize.plot1 <- ggplot(data = world) +
  geom_sf(color="grey70", 
          # aes(fill=rev(economy)),
          alpha=.4, show.legend = F) + 
  # scale_fill_brewer(type="seq") + 
  # geom_line(data=ATLAS_Databank.geo4, 
  #           aes(x=lon, y=lat, group=Citation, color = Domain)) + 
  geom_point(data=ATLAS_space_Databank_locations,
             aes(x=lon, y=lat, 
                 size = GroupSampleSize),
             shape=21,
             alpha=1,
             position = position_jitter(height=1, width=1),
             color='black', fill = NA) +
  coord_sf(expand=0) + 
  scale_x_continuous(name = NULL, limits = c(-180, 180)) + 
  scale_y_continuous(name = NULL, limits = c(-90, 90)) + 
  scale_color_discrete(NULL, guide=F) + 
  scale_fill_discrete(NULL, guide=F) + 
  scale_size("sample size", 
             breaks=c(4, 20,100,500), 
             range=c(.1,12)) + 
  
  theme_bw() + 
  theme(plot.title = element_text(hjust=.5), 
        panel.grid.major = element_blank(),
        legend.position = "bottom", strip.text = element_text(size=20))

atlas.space.sampleSize.plot1
ggsave("plots/ATLAS_space_fieldsites_globalDistribution_sampleSize.pdf",
       atlas.space.sampleSize.plot1, width=6, height=6)

```

Add info on FoR fieldsite: 
```{r}
atlas.space.FoR.plot1 <- ggplot(data = world) +
  geom_sf(color="grey70", 
          # aes(fill=rev(economy)),
          alpha=.4, show.legend = F) + 
  # scale_fill_brewer(type="seq") + 
  # geom_line(data=ATLAS_Databank.geo4, 
  #           aes(x=lon, y=lat, group=Citation, color = Domain)) + 
  geom_point(data=ATLAS_space_Databank,
             aes(x=lon, y=lat, 
                 # size = GroupSampleSize, 
                 fill = FoR),
             shape=21,
             alpha=.5,
             size = 3,
             position = position_jitter(height=1, width=1),
             color='black') +
  geom_label(x = 75, y=-60, 
             label = paste("# continents = 6",
                           "\n# countries = ", 
                           n_distinct(ATLAS_space_Databank$Country), 
                           "\n# locations = ",
                           n_distinct(ATLAS_space_Databank$StudyLocation), 
                           "\n# studies = ", 
                           nrow(ATLAS_space_Databank), sep="")) + 
  coord_sf(expand=0) + 
  scale_x_continuous(name = NULL, limits = c(-180, 180)) + 
  scale_y_continuous(name = NULL, limits = c(-90, 90)) + 
  scale_color_discrete(NULL, guide=F) + 
  scale_fill_discrete("Spatial FoR") + 
  # scale_size("sample size", 
  #            breaks=c(20,100,500), 
  #            range=c(.1,12)) + 
  
  theme_bw() + 
  theme(plot.title = element_text(hjust=.5), 
        panel.grid.major = element_blank(),
        legend.position = "bottom", strip.text = element_text(size=20))

atlas.space.FoR.plot1
ggsave("plots/ATLAS_space_fieldsites_globalDistribution_FOR.pdf",
       atlas.space.FoR.plot1, width=6, height=6)

```

# Analysis

## Urban-Rural and Spatial Scale: 

### Free FoR Response:
When people are free to choose a FoR, are urban-rural or task scale associated with choosing allo over ego? 

```{r}
space_free <- ATLAS_space_Databank %>% 
  filter(FoR_In_Task == "ego/allo") %>% 
  # filter(urbanRuralNum != .5) %>% 
  mutate(urbanRural_center_on_largeurban = relevel(factor(UrbanRural), "urbanl"),
         urbanRuralNum_urbanBaseline = 2 - urbanRuralNum) %>% 
  mutate(GroupSampleSize.interpolated = case_when(is.na(GroupSampleSize) ~ median(GroupSampleSize, na.rm=T),
                                                  TRUE ~ GroupSampleSize)) %>%
  mutate(urbanRuralNum01 = urbanRuralNum/max(urbanRuralNum),
         scaleNum01 = scaleNum/max(scaleNum))

free.urban.m1 <- glmer(FoR_is_ego ~ urbanRuralNum * scaleNum + 
                         (1|Citation),
                      weights = GroupSampleSize.interpolated,
                      family="binomial",
                      data = space_free)
summary(free.urban.m1)

free.urban.m2 <- glmer(FoR_is_ego ~ urbanRuralNum_urbanBaseline * scaleNum + 
                         (1|Citation),
                      weights = GroupSampleSize.interpolated,
                      family="binomial",
                      data = space_free)
summary(free.urban.m2)


```

```{r}
data.frame(effects::Effect(c("scaleNum"), free.urban.m1))
free.urban.m1.effects <- data.frame(effects::Effect(c("scaleNum",
                             "urbanRuralNum"), 
                           free.urban.m1)) 

free.urban.m1.effects %>% 
  filter(scaleNum %in% c(0,2),
         urbanRuralNum %in% c(0,1))


free.urban.m1.effects %>% 
  ggplot(aes(x=urbanRuralNum, y=fit, group=scaleNum, color=factor(scaleNum))) + 
  geom_line() + 
  theme_classic()

space_free %>% 
  group_by(UrbanRural, scaleNum) %>%
  summarize(FoR_is_ego_m = mean(FoR_is_ego),
            n = n(),
            samplen = sum(StudySampleSize, na.rm=T))
```

Plot: 

```{r}
space_free.agg <- space_free %>% 
  filter(urbanRuralNum != .5) %>%
  mutate(n_countries_total = n_distinct(Country)) %>% 
  group_by(urbanRuralNum, UrbanRural, n_countries_total) %>% 
  summarize(FoR_is_allo.m = mean(FoR_is_allo),
            FoR_is_allo.se = sd(FoR_is_allo)/sqrt(n()),
            n_countries = n_distinct(Country),
            n_studies = n(), .groups = "drop") %>% 
  mutate(UrbanRural = ordered(UrbanRural, 
                              levels = c("rural", "urbans", "urbanl")))
space_free.agg

free_urban.plot1 <- space_free.agg %>% 
  ggplot(aes(x=UrbanRural, y = FoR_is_allo.m)) + 
  geom_pointrange(aes(ymin = FoR_is_allo.m - FoR_is_allo.se,
                      ymax = FoR_is_allo.m + FoR_is_allo.se), size=2) + 
  geom_label(aes(label = paste("# countries = ", n_countries, 
                               "\n# studies = ", n_studies, sep=""))) + 
  # geom_hline(yintercept=0, linetype='dashed') + 
  scale_x_discrete(NULL, labels = c("rural", 
                                    "small-scale\nurban", 
                                    "large-scale\nurban")) + 
  scale_y_continuous("P(Allocentric)") + 
  theme_classic(base_size = 15) + 
  theme(axis.text.x = element_text(angle=30, vjust = 1, hjust = 1))

free_urban.plot1
ggsave("plots/FOR_by_UrbanRural.pdf", urbanRural.plot1, width = 4.5, height=6)

```

### Forced FoR Response

```{r}
space_forced <- ATLAS_space_Databank %>% 
  filter(FoR_In_Task != "ego/allo") %>% 
  mutate(for_performance_num = as.numeric(PerformanceIfRestrictedFoR == "good"),
         ego_in_task = as.numeric(FoR_In_Task == "ego"),
         allo_in_task = as.numeric(FoR_In_Task == "allo"))

forced.urban.m1 <- glmer(for_performance_num ~ urbanRuralNum *  allo_in_task + 
                           (1|Citation), 
                         weights = GroupSampleSize,
                         space_forced, 
                         family="binomial")
summary(forced.urban.m1)


space_forced.predict <- as.data.frame(
  effects::Effect(focal.predictors = 
                    c("allo_in_task", "urbanRuralNum"), 
                  mod = forced.urban.m1)) %>% 
  filter(allo_in_task %in% c(0,1)) %>%
  mutate(FoR = case_when(allo_in_task == 1 ~ "allo",
                         TRUE ~ "ego")) %>% 
  select(FoR, urbanRuralNum, everything()) %>% select(-allo_in_task)

space_forced.predict %>% 
  filter(urbanRuralNum %in% c(0,2)) %>%
  ggplot(aes(x=urbanRuralNum, y = fit, group=FoR, color=FoR)) + 
  geom_line() + 
  geom_pointrange(aes(ymin = upper, 
                      ymax = fit + se)) + 
  scale_y_continuous("Performance",labels = c("bad","good"), breaks = c(0,1)) + 
  theme_classic()

```
# Bayesian Analyses
```{r}
library(brms)
free.urban.b1 <- brm(FoR_is_ego|weights(GroupSampleSize.interpolated) ~ urbanRuralNum * scaleNum + 
                         (1|Citation),
                      family= bernoulli(),
                      data = space_free)
summary(free.urban.b1)
```

Now account for spatial non-independence using a Gaussian Process over lat-long locations: 
https://github.com/ScottClaessens/crossNationalCorrelations/blob/master/vignette.md

```{r}
free.urban.b1.space <- brm(FoR_is_ego|weights(GroupSampleSize.interpolated) ~ urbanRuralNum * scaleNum +
                       gp(lat,lon) + # fits Gaussian Process using euclidean distance in lat-long space
                       (1|Citation), chains = 4, cores = 4,
                      family= bernoulli(), 
                      file = "brms_models/free.urban.b1.space",
                      data = space_free)
summary(free.urban.b1.space)
```

```{r}
space_free.scale.urban.agg <- space_free %>% 
  group_by(urbanRuralNum, scaleNum) %>% 
  summarize(FoR_is_ego_m = mean(FoR_is_ego), 
            n = n())

space_free.scale.urban.agg %>% 
  ggplot(aes(x = urbanRuralNum, y = FoR_is_ego_m, color = scaleNum, group = scaleNum)) + 
  geom_point() 


conditional_effects(free.urban.b1.space)
```

