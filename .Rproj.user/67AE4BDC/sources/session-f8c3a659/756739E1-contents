---
title: "ATLAS_CogSci"
author: "TylerMarghetis"
date: "7/27/2022"
output: html_document
---

Based on code by Tyler Marghetis and Sandra Chacon, March 5 2021.
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) 
library(ggmap) 
library(sf)
library("rnaturalearth")
library("rnaturalearthdata")
library(cowplot)
library(brms)
```

# Load data

```{r}
# Load Space
ATLAS_space_Databank <- read_csv("../ATLAS Data/ATLAS Databank v0.2 - SPACE Finalized â€“ January 21 2024.csv")
ATLAS_space_Databank <- ATLAS_space_Databank %>% 
  subset(is.na(Citation) == F) %>%
  mutate(Domain = "space")
```


Massage:
```{r}

#### Combine data ####
ATLAS_space_Databank <- ATLAS_space_Databank %>% 
  mutate(GroupSampleSize = as.integer(as.character(GroupSampleSize)),
         StudySampleSize = as.integer(as.character(StudySampleSize)))

```

# Geolocation
Only run once: 
```{r}
register_google(key = "AIzaSyA2mOXjlpnfZ7d8ZXyM0jazsfy922uUnQc") # API key from Marghetis Lab account
has_google_key()

ATLAS_space_Databank <- ATLAS_space_Databank %>% 
  mutate(SpecificLocation_noNA = case_when(is.na(SpecificLocation) == TRUE ~ "",
                                           is.na(SpecificLocation) == FALSE ~ SpecificLocation,
                                           TRUE ~ "error")) %>%
  mutate(StudyLocation = paste(SpecificLocation_noNA, Country, sep=",")) 

ATLAS_space_Databank.geo <- ATLAS_space_Databank %>% 
  mutate(latlon = geocode(StudyLocation))

# Massage the data, so the lat and long are stored in separate variables, for each
ATLAS_space_Databank.geo <- ATLAS_space_Databank.geo %>%
  mutate(lat = latlon$lat,
         lon = latlon$lon) %>% 
  select(-latlon)

# write_csv(ATLAS_space_Databank.geo, "../ATLAS Data/ATLAS_space_geo.csv")
```

# Load geolocated data 
```{r}
rm(list = ls())
ATLAS_space_geo <- read_csv("../ATLAS Data/ATLAS_space_geo.csv")
# ATLAS_space_geo <- ATLAS_space_geo %>% filter(Year <= 2020)
nrow(ATLAS_space_geo)

```

## Mutate variables
```{r}
communicativeTasks <- c("LanguageProductionSpoken","LanguageProductionWritten",
                        "GesturePrompted", "GestureSpontaneous",
                        "ForcedChoiceDescription")
gestureTasks <- c("LanguageProductionSpoken","LanguageProductionWritten",
                  "GesturePrompted", "GestureSpontaneous",
                  "ForcedChoiceDescription")
languageTasks <- c("LanguageProductionSpoken","LanguageProductionWritten",
                   "ForcedChoiceDescription")

ATLAS_space_geo <- ATLAS_space_geo %>%
  mutate(UrbanRural2 = case_when(UrbanRural == "rural/urbans" ~ "rural",
                                 UrbanRural == "urbans" ~ "urban (small)",
                                 UrbanRural == "urbanl" ~ "urban (large)",
                                 TRUE ~ UrbanRural),
         UrbanRural2 = ordered(UrbanRural2, levels = c("rural","urban (small)","urban (large)"))) %>% 
  mutate(urbanRuralNum = case_when(UrbanRural == "rural" ~ 0, 
                                   UrbanRural == "rural/urbans" ~ 1, 
                                   UrbanRural == "urbans" ~ 1, 
                                   UrbanRural == "urbanl" ~ 2)) %>% 
  mutate(scaleNum = case_when(Scale == "small" ~ 0, 
                              Scale == "medium; small" ~ .5, 
                              Scale == "medium" ~ 1, 
                              Scale == "large" ~ 2,
                              TRUE ~ NA),
         FoR_is_allo = FoR %in% c("allo","both"),
         FoR_is_ego = FoR %in% c("ego","both"),) %>% 
  mutate(taskIsCommunicative = DependentMeasurePrimary %in% communicativeTasks,
         taskIsGestural = DependentMeasurePrimary %in% gestureTasks,
         taskIsLinguistic = DependentMeasurePrimary %in% languageTasks)
```

# Describe corpus

From 1990s to 2020: 
```{r}
# 1993 to 2021:
summary(ATLAS_space_geo$Year)

# 20773 independent participants, calculated after removing participants
# who were identified as having participated in multiple tasks/studies:
sum(ATLAS_space_geo$StudySampleSize - ATLAS_space_geo$RepeatedParticipantsWithinStudy, na.rm=T)

# 54 papers:
n_distinct(tolower(ATLAS_space_geo$Citation))

# Collapse varieties into their common language: 
ATLAS_space_geo <- ATLAS_space_geo %>% 
  mutate(LanguageCombined = case_when(Language %in% c("Us-English",
                                                      "US-English",
                                                      "English") ~ "English",
                                      Language %in% c("Sumu (Mayangna)",
                                                      "Sumu-Mayangna") ~ "Sumu (Mayangna)",
                                      Language %in% c("Gurindji",
                                                      "Gurindji Kriol") ~ "Gurindji",
                                      Language %in% c("low Balinese") ~ "Balinese",
                                      Language %in% c("Traditional Negev Arabic") ~ "Arabic",
                                      Language %in% c("Juchiteco Zapotec",
                                                      "Isthmus Zaptotec",
                                                      "Isthmus Zapotec",
                                                      "Zapotec") ~ "Isthmus/Juchiteco Zapotec",
                                      Language %in% c("Tzeltal","Tseltal") ~ "Tseltal",
                                      Language %in% c("Spanish (European)",
                                                      "Spanish",
                                                      "Spanish (Mexican)",
                                                      "Spanish (Nicaraguan)") ~ "Spanish",
                                      Language %in% c("Mandarin Chinese",
                                                      "Mandarin") ~ "Mandarin Chinese",
                                      Language %in% c("Yucatec",
                                                      "Yucatec Maya") ~ "Yucatec Maya",
                                      Language %in% c("Ayutla Mixe",
                                                      "Mixe",
                                                      "Mandarin",
                                                      "Spanish (Nicaraguan)") ~ "Spanish",
                                      TRUE ~ Language))
```


## Linguistic/cultural/demographic counts
```{r}
ATLAS_space_geo %>% filter(StudySampleSize ==1)
# 38 languages or varieties:
n_distinct(tolower(ATLAS_space_geo$LanguageCombined))
unique(sort(ATLAS_space_geo$LanguageCombined))

# 29 countries:
n_distinct(tolower(ATLAS_space_geo$Country))

# 80 study location:
n_distinct(tolower(ATLAS_space_geo$SpecificLocation))

# 7229 unique participants completed a total of 11934 tasks (i.e., some participants completed multiple tasks within a single paper)
ATLAS_space_geo <- ATLAS_space_geo %>% 
  mutate(GroupSampleSize_noNA = case_when(is.na(GroupSampleSize) ~ 1,
                                          TRUE ~ GroupSampleSize),
         RepeatedParticipantsWithinStudy_noNA = case_when(is.na(RepeatedParticipantsWithinStudy) ~ 0,
                                                          TRUE ~ RepeatedParticipantsWithinStudy),
         TaskID_noNA = case_when(is.na(TaskID) ~ "singleTask",
                                 TRUE ~ TaskID)) %>% 
  mutate(unique_N = GroupSampleSize_noNA - RepeatedParticipantsWithinStudy_noNA)

ATLAS_space_geo %>% 
  summarize(sum(unique_N),
            sum(GroupSampleSize_noNA))

```

## Visualize the corpus itself

Global distribution of field sites: 
```{r}
#### Make a plot! ####
world <- ne_countries(scale = "medium", returnclass = "sf") # get world map data

space.location.plot <- ggplot(data = world) +
  geom_sf(color="grey70", 
          size=1,
          # aes(fill=rev(economy)),
          alpha=0.4, show.legend = F) +
  geom_point(data=subset(ATLAS_space_geo), 
             aes(x=lon, y=lat, 
                 # shape=LateralDirection,
                 fill=Language,
                 size=StudySampleSize), # decide whether to fill in circle
             shape=21,
             color="black",
             alpha=.5) +
  geom_point(data=subset(ATLAS_space_geo), 
             aes(x=lon, y=lat), # decide whether to fill in circle
             # shape=21, 
             fill="black",
             size=.5,
             alpha=.5) +
  coord_sf(expand=0,label_graticule = "") + 
  #facet_wrap(~Domain_label, ncol=1) +
  scale_x_continuous(name = NULL, limits = c(-180, 180), breaks = NULL) + 
  scale_y_continuous(name = NULL, limits = c(-60, 90), breaks = NULL) + 
  # scale_shape_manual(NULL, values=c(21,24), ) +
  scale_size("sample size", 
             # guide=F, 
             breaks=c(5, 50, 500), 
             range=c(.1,12)) + 
  # scale_color_discrete(NULL, guide=F) + 
  scale_fill_discrete(NULL,
                      guide=F
  ) +
  # facet_wrap(~Domain, nrow = 3) + 
  theme_bw(base_size = 20) + 
  theme(plot.title = element_text(hjust=.5), 
        panel.grid.major = element_blank(),
        axis.ticks = element_blank(),
        legend.position='bottom', strip.text = element_text(size=20))
space.location.plot




ggsave("plots/space.location.plot.pdf",
       space.location.plot2, height = 6, width = 12, dpi = "retina")


print(xtable::xtable(matrix(c(0,1,1,1,11,1), nrow=2), type = "latex"))

```

```{r}
fieldsite.FOR.plot <- ggplot(data = world) +
  geom_sf(color="grey70", 
          size=1,
          # aes(fill=rev(economy)),
          alpha=0.4, show.legend = F) +
  # geom_point(data=subset(ATLAS_space_geo), 
  #            aes(x=lon, y=lat,
  #                shape=FoR),
  #            color="black",
  #            size=2.5,
  #            alpha=1) +
  geom_point(data=subset(ATLAS_space_geo), 
             aes(x=lon, y=lat, 
                 shape=FoR,
                 color=FoR), # decide whether to fill in circle
             size=3,
             # color="black",
             alpha=.7, position = position_jitter(height = 5, width = 5)) +
  coord_sf(expand=0,label_graticule = "") + 
  #facet_wrap(~Domain_label, ncol=1) +
  scale_x_continuous(name = NULL, limits = c(-180, 180), 
                     # expand = c(0,0),
                     breaks = NULL) + 
  scale_y_continuous(name = NULL, limits = c(-60, 90), 
                     expand = c(0,0),
                     breaks = NULL) + 
  # scale_shape_manual(NULL, values=c(21,24), ) +
  scale_size("sample size", 
             # guide=F, 
             breaks=c(5, 50, 500), 
             range=c(.1,12)) + 
  # scale_color_discrete(NULL, guide=F) + 
  scale_fill_brewer("spatial frame of reference:",
                    type = "seq", 
                    palette = 1) +
  # facet_wrap(~Domain, nrow = 3) + 
  theme_bw(base_size = 20)  + 
  theme(plot.title = element_text(hjust=.5), 
        panel.grid = element_blank(),
        axis.ticks = element_blank(),
        axis.ticks.length = unit(0, "pt"),
        # plot.margin = margin(0,0,0,0), 
        legend.position='top', 
        legend.title=element_blank(),
        legend.margin = margin(0, 0, 0, 0),
        legend.spacing.x = unit(0, "mm"),
        legend.spacing.y = unit(0, "mm"))

ggsave("plots/CogSci2024/fieldsite.FOR.plot.pdf", fieldsite.FOR.plot, width = 10, height = 6)

```

```{r, fig.height= 4, fig.width = 8}
fieldsite_info.agg <- ATLAS_space_geo %>% 
  group_by(Citation, SpecificLocation_noNA, UrbanRural2) %>% 
  summarize(unique_N_total = sum(unique_N), .groups = "drop")


sample.hist.plot <- fieldsite_info.agg %>% 
  ggplot(aes(x=unique_N_total)) + 
  geom_histogram(bins=10) + 
  ggtitle("Site Sample Size") + 
  scale_x_log10(NULL, expand=c(0,0)) + 
  scale_y_continuous(expand=c(0,0), limits = c(0,27)) + 
  theme_bw(base_size = 12) + theme(panel.grid = element_blank(),
                                   axis.text = element_text(size = 10),
                                   axis.ticks = element_blank(),
                                   plot.title = element_text(hjust=.5))
# sample.hist.plot

urbanRural.hist.plot <- fieldsite_info.agg %>% 
  group_by(UrbanRural2) %>% summarize(n = n()) %>%
  ggplot(aes(x=UrbanRural2, y = n)) + 
  geom_bar(stat = "identity") + 
  ggtitle("Distinct Environments") + 
  scale_x_discrete(NULL) + 
  scale_y_continuous("count", expand=c(0,0), limits = c(0,45)) + 
  theme_bw(base_size = 12) + theme(panel.grid = element_blank(),
                                   axis.text = element_text(size = 10),
                                   axis.ticks = element_blank(), 
                                   plot.title = element_text(hjust=.5))

# urbanRural.hist.plot

right_col <- plot_grid(sample.hist.plot, urbanRural.hist.plot, ncol=2, 
                       rel_widths = 2, rel_heights = 1,
                       labels = c("B","C"))
corpus_info.plot <- plot_grid(fieldsite.FOR.plot, right_col, nrow = 2, 
                              rel_heights = c(2.2,1), 
                              rel_widths = c(1,1),
                              labels = c("A",NULL))
ggsave("plots/CogSci2024/corpus_info.plot.pdf", corpus_info.plot, width = 8, height = 5.5)
```

## Languages
```{r}
# xtabs(~unique(ATLAS_space_geo$LanguageCombined))
languages.agg <- ATLAS_space_geo %>% 
  group_by(LanguageCombined) %>% 
  summarize(unique_N_total = sum(unique_N),
            n_studies = n()) %>% 
  mutate(n_studies_ord = rank(n_studies, ties.method = "random"),
         unique_N_total_ord = rank(unique_N_total, ties.method = "random")) 
sort(languages.agg$n_studies_ord)

languages.plot <- languages.agg %>%
  ggplot(aes(x = unique_N_total_ord, y = n_studies_ord)) + 
  geom_text(aes(label = LanguageCombined)) + 
  scale_x_continuous("Number of Tasks/Sessions", breaks = NULL, 
                     limits = c(0,max(languages.agg$unique_N_total_ord)+3)) + 
  scale_y_continuous("Number of Unique Participants", breaks = NULL) + 
  theme_bw(base_size = 12) + theme(line = element_blank(), axis.ticks = element_blank())

ggsave(filename = "plots/CogSci2024/languages.plot.pdf", languages.plot, width = 4, height = 6)
```


# Analysis

## Spatial proximity

## Urban-Rural and Spatial Scale: 
```{r}
ATLAS_space_geo <- ATLAS_space_geo %>% 
  mutate(urbanRural_center_on_largeurban = relevel(factor(UrbanRural), "urbanl"),
         urbanRuralNum_urbanBaseline = 2 - urbanRuralNum) %>% 
  mutate(GroupSampleSize.interpolated = case_when(is.na(GroupSampleSize) ~ median(GroupSampleSize, na.rm=T),
                                                  TRUE ~ GroupSampleSize)) %>%
  mutate(urbanRuralNum01 = urbanRuralNum/max(urbanRuralNum),
         scaleNum01 = scaleNum/max(scaleNum)) %>% 
  mutate(for_performance_num = as.numeric(PerformanceIfRestrictedFoR == "good"),
         ego_in_task = as.numeric(FoR_In_Task == "ego"),
         allo_in_task = as.numeric(FoR_In_Task == "allo"))

# one entry was missing a spatial scale value: 
ATLAS_space_geo[is.na(ATLAS_space_geo$scaleNum),]$scaleNum <- 0
```

```{r}
ATLAS_space_geo %>% group_by(FoR) %>% 
  summarize(n = n(),
            unique_N = sum(unique_N))
```

### Free FoR Response:
When people are free to choose a FoR, are urban-rural or task scale associated with choosing allo over ego? 

```{r}
space_free <- ATLAS_space_geo %>% 
  filter(FoR_In_Task == "ego/allo") 

space_free %>% group_by(FoR) %>% 
  summarize(n = n(),
            unique_N = sum(unique_N))

space_free %>% group_by(scaleNum) %>% 
  summarize(n = n(),
            unique_N= sum(unique_N),
            FoR_is_ego = mean(FoR_is_ego),
            FoR_is_allo = mean(FoR_is_allo))

```

```{r}
free.urban.b0 <- brm(FoR_is_ego|weights(GroupSampleSize.interpolated) ~ urbanRuralNum + scaleNum +
                       (1|Citation), 
                     chains = 4, cores = 4, 
                     warmup = 1000, iter = 8000, control = list(max_treedepth = 20, adapt_delta = .99),
                     family= bernoulli(), 
                     file = "brms_models/free.urban.b0",
                     data = space_free)
summary(free.urban.b0)

free.urban.b0.allo <- brm(FoR_is_allo|weights(GroupSampleSize.interpolated) ~ urbanRuralNum + scaleNum +
                       (1|Citation), 
                     chains = 4, cores = 4, 
                     warmup = 1000, iter = 8000, control = list(max_treedepth = 20, adapt_delta = .99),
                     family= bernoulli(), 
                     file = "brms_models/free.urban.b0.allo",
                     data = space_free)
summary(free.urban.b0.allo)

free.urban.b1 <- brm(FoR_is_ego|weights(GroupSampleSize.interpolated) ~ urbanRuralNum * scaleNum +
                       (1|Citation), 
                     chains = 4, cores = 4, 
                     warmup = 1000, iter = 3000,
                     family= bernoulli(), 
                     file = "brms_models/free.urban.b1",
                     data = space_free)

summary(free.urban.b1)

space_free <- space_free %>% 
  mutate(scaleNum_baselinedLarge = scaleNum - 2 )

free.urban.b2 <- brm(FoR_is_ego|weights(GroupSampleSize.interpolated) ~ urbanRuralNum * scaleNum_baselinedLarge +
                       (1|Citation), 
                     chains = 4, cores = 4, 
                     warmup = 1000, iter = 8000,
                     family= bernoulli(), control = list(max_treedepth = 20),
                     file = "brms_models/free.urban.b2",
                     data = space_free)

summary(free.urban.b2)

```

```{r}
space_free %>% 
  group_by(urbanRuralNum, scaleNum) %>% 
  summarize(ego_in_task = mean(FoR_is_ego),
            n = n())
```

```{r}
space_free$FoR_is_ego_pred <-  predict(free.urban.b1)[,1]

space_free %>% 
  group_by(urbanRuralNum, scaleNum) %>% 
  summarize(FoR_is_ego_pred_m = mean(FoR_is_ego_pred),
            FoR_is_ego_m = mean(FoR_is_ego))
```


Now account for spatial non-independence using a Gaussian Process over lat-long locations: 
https://github.com/ScottClaessens/crossNationalCorrelations/blob/master/vignette.md

```{r}
free.urban.b1.space <- brm(FoR_is_ego ~ urbanRuralNum * scaleNum +
                             gp(lat,lon) + # fits Gaussian Process using euclidean distance in lat-long space
                             (1|Citation), chains = 4, cores = 4,
                           family= bernoulli(), warmup = 1000, iters = 8000,
                           file = "brms_models/free.urban.b1.space",
                           data = space_free)
summary(free.urban.b1.space)

free.urban.b2.space <- brm(FoR_is_ego|weights(GroupSampleSize.interpolated) ~ urbanRuralNum * scaleNum +
                             gp(lat,lon) + # fits Gaussian Process using euclidean distance in lat-long space
                             (1|Citation), chains = 4, cores = 4,
                           family= bernoulli(), warmup = 1000, iters = 8000,
                           file = "brms_models/free.urban.b1.space",
                           data = space_free)
summary(free.urban.b2.space)
```

### Forced choice

```{r}
space_forced <- ATLAS_space_geo %>% 
  filter(FoR_In_Task != "ego/allo") 

# forced.urban.m1 <- glmer(for_performance_num  ~ urbanRuralNum *  allo_in_task +
#                            (1|Citation),
#                          weights = GroupSampleSize.interpolated,
#                          space_forced,
#                          family="binomial")
# summary(forced.urban.m1)

forced.urban.b0 <- brm(for_performance_num | weights(GroupSampleSize.interpolated) ~ 1 + 
                         urbanRuralNum + allo_in_task + 
                       (1|Citation), 
                     chains = 4, cores = 4, 
                     warmup = 2000, iter = 8000,
                     family= bernoulli(), control = list(max_treedepth = 20, adapt_delta = .99),
                     file = "brms_models/forced.urban.b0",
                     data = space_forced)
summary(forced.urban.b0)

forced.urban.b1 <- brm(for_performance_num | weights(GroupSampleSize.interpolated) ~ 1 + 
                         urbanRuralNum * allo_in_task + 
                       (1|Citation), 
                     chains = 4, cores = 4, 
                     warmup = 2000, iter = 8000,
                     family= bernoulli(), control = list(max_treedepth = 20, adapt_delta = .99),
                     file = "brms_models/forced.urban.b1",
                     data = space_forced)
summary(forced.urban.b1)

```

```{r}
space_forced.predict <- as.data.frame(
  effects::Effect(focal.predictors = 
                    c("allo_in_task", "urbanRuralNum"), 
                  mod = forced.urban.m1)) %>% 
  filter(allo_in_task %in% c(0,1)) %>%
  mutate(FoR = case_when(allo_in_task == 1 ~ "allo",
                         TRUE ~ "ego")) %>% 
  select(FoR, urbanRuralNum, everything()) %>% select(-allo_in_task)

space_forced.predict %>% 
  filter(urbanRuralNum %in% c(0,2)) %>%
  ggplot(aes(x=urbanRuralNum, y = fit, group=FoR, color=FoR)) + 
  geom_line() + 
  geom_pointrange(aes(ymin = upper, 
                      ymax = fit + se)) + 
  scale_y_continuous("Performance",labels = c("bad","good"), breaks = c(0,1)) + 
  theme_classic()

```

# Plots of results
```{r}
space_free <- ATLAS_space_geo %>% 
  filter(FoR_In_Task == "ego/allo")

space_free.small.agg <- space_free %>% 
  filter(Scale == "small") %>%
  group_by(urbanRuralNum, FoR) %>% 
  summarize(n = n(), .groups = "drop") %>% 
  group_by(urbanRuralNum) %>% 
  mutate(n_environ = sum(n),
         prop = n/n_environ) 

space_free.small.agg.plot <- space_free.small.agg %>% 
  ggplot(aes(x=urbanRuralNum, y=FoR)) + 
  geom_tile(aes(fill = prop)) + 
  geom_label(aes(label = round(prop, 2)), color = "black") + 
  # scale_fill_gradient(low = "black", high="white") + 
  scale_fill_gradient(NULL, low = "black", high="white", breaks = c(.2,.4,.6)) + 
  scale_x_continuous("Test Environment", expand = c(0,0), 
                     breaks = c(0,1,2), 
                     labels = c("rural","urban (small)", "urban (large)"),
                     position="top") + 
  scale_y_discrete("Frame of Reference", expand = c(0,0)) + 
  theme_bw(base_size = 12) + theme(legend.position = "bottom") + 
  guides(fill=guide_colorbar(ticks.colour = NA, frame.colour = "black"))
space_free.small.agg.plot
ggsave("plots/CogSci2024/space_free.small.agg.plot.pdf", space_free.small.agg.plot, width = 4, height = 5)

```

```{r}
space_free.scale.agg <- space_free %>% 
  # filter(Scale == "small") %>%
  filter(scaleNum %in% c(0,1,2)) %>% 
  group_by(scaleNum, FoR) %>% 
  summarize(n = n(), .groups = "drop") %>% 
  group_by(scaleNum) %>% 
  mutate(n_environ = sum(n),
         prop = n/n_environ) 

space_free.scale.agg.plot <- space_free.scale.agg %>% 
  filter(scaleNum %in% c(0,1,2)) %>% 
  ggplot(aes(x=scaleNum, y=FoR)) + 
  geom_tile(aes(fill = prop)) + 
  geom_label(aes(label = round(prop, 2)), color = "black") + 
  # scale_fill_gradient(low = "black", high="white") + 
  scale_fill_gradient(NULL, low = "black", high="white", breaks = c(.2,.4,.6)) + 
  scale_x_continuous("Task Scale", expand = c(0,0),
                     breaks = c(0,1,2),
                     labels = c("small","medium", "large"),
                     position="top") +
  scale_y_discrete("Frame of Reference", expand = c(0,0)) + 
  theme_bw(base_size = 12) + theme(legend.position = "bottom") + 
  guides(fill=guide_colorbar(ticks.colour = NA, frame.colour = "black"))
space_free.scale.agg.plot
ggsave("plots/CogSci2024/space_free.scale.agg.plot.pdf", space_free.scale.agg.plot, width = 4, height = 5)

```